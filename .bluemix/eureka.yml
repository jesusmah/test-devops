---
stages:
- name: Build Java Projects
  inputs:
  - url: https://github.com/jesusmah/eureka-ic-clone.git
    type: git
    branch: master
    dir_name: null
  triggers:
  - type: commit
  properties:
  - name: DOCKER_DIR
    value: docker
    type: text
  - name: BUILD_TARGET
    value: build/libs/eureka-0.0.1-SNAPSHOT.jar
    type: text
  jobs:
  - name: Build Java
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      echo "Run gradle build..."
      export JAVA_HOME=~/java8
      export PATH=$JAVA_HOME/bin:$PATH
      /bin/bash build-microservice.sh
      cp ${BUILD_TARGET} ${DOCKER_DIR}/app.jar
      ls -al $PWD
      echo "Gradle build complete."
- name: Build Docker Image
  inputs:
  - type: job
    stage: Build Java Projects
    job: Build Java
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: LABEL_PREFIX
    value: toolchain
    type: text
  - name: DOCKER_DIR
    value: docker
    type: text
  - name: NAME
    value: wfd-eureka-jesus
    type: text
  jobs:
  - name: Build container
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: microservices-whats-for-dinner
    IMAGE_NAME: wfd-eureka-jesus
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
      #!/bin/bash
      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      log_and_echo "$LABEL" "Starting build script"
      cd ${WORKSPACE}/${DOCKER_DIR}
      # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
            #####################
            # Run unit tests    #
            #####################
            log_and_echo "$LABEL" "No unit tests cases have been checked in"
            ######################################
            # Build Container via Dockerfile     #
            ######################################
            # REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
            FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${LABEL_PREFIX}${APPLICATION_VERSION}
            # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.
            if [ -f Dockerfile ]; then
              log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
              ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
              # build image
              BUILD_COMMAND=""
              if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/${DOCKER_DIR}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
              else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/${DOCKER_DIR}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
              fi
              if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
              else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
              fi
            else
              log_and_echo "$ERROR" "Dockerfile not found in project"
              ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
              exit 1
            fi

            ######################################################################################
            # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
            ######################################################################################
            echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
- name: Deploy
  inputs:
  - type: job
    stage: Build Docker Image
    job: Build container
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '2'
    type: text
  - name: DESIRED_INSTANCES
    value: '1'
    type: text
  - name: CONCURRENT_VERSIONS
    value: '1'
    type: text
  - name: AUTO_RECOVERY
    value: 'false'
    type: text
  - name: CONTAINER_SIZE
    value: micro
    type: text
  - name: IGNORE_MAPPING_ROUTE
    value: 'yes'
    type: text
  - name: BRIDGE_APP
    value: container_bridge_app
    type: text
  - name: ROUTE_DOMAIN
    value: mybluemix.net
    type: text
  - name: ROUTE_HOSTNAME
    value: wfd-eureka-jesus
    type: text
  - name: TEST_RESULT_FOR_AD
    value: '1'
    type: text
  - name: GROUP_SIZE
    value: '1'
    type: text
  - name: DEBUG
    value: '1'
    type: text
  - name: GIT_HOME
    value: IBMActiveDeploy-Toolchain
    type: text
  - name: SERVICE_DISCOVERY_UPS
    value: eureka-service-discovery
    type: text
  - name: UNIQUE_IDENTIFIER
    value: jesus
    type: text
  - name: NAME
    value: ''
    type: text
  - name: APP_NAME
    value: wfd-eureka-jesus
    type: text
  jobs:
  - name: Deploy Container Group
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: microservices-whats-for-dinner
    PORT: '8761'
    CONTAINER_NAME: wfd-eureka-jesus
    DEPLOY_TYPE: red_black
    COMMAND: "#!/bin/bash\n\n      # -------------- #\n      # Set debug mode #\n\
      \      # -------------- #\n\n      if [[ -n ${DEBUG} ]]; then set -x ; fi\n\n\
      \      echo -e \"${label_color}# ------------------------------- #${no_color}\"\
      \n      echo -e \"${label_color}# [BEGIN]: Deploy Container Group #${no_color}\"\
      \n      echo -e \"${label_color}# ------------------------------- #${no_color}\"\
      \n\n      # The following are some example deployment scripts.  Use these as\
      \ is or fork them and include your updates here:\n      echo -e \"${label_color}Starting\
      \ deployment script${no_color}\"\n      # To view/fork this script goto: https://github.com/Osthanes/deployscripts\n\
      \      # git_retry will retry git calls to prevent pipeline failure on temporary\
      \ github problems\n      # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer\n\
      \      git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts\n\
      \n      # Deploy Container Group:\n      # Optional environment properties (can\
      \ be set directly in this script, or defined as environment properties):\n \
      \     #      NAME              Value         Description\n      #   =============\
      \      =========     ==============\n      #   ROUTE_HOSTNAME      String  \
      \     Specify the Hostname for the Cloud Foundry Route you wish to assign to\
      \ this container group.  By default this is not set.\n      #   ROUTE_DOMAIN\
      \        String       Specify domain name for the Cloud Foundry Route you wish\
      \ to assign to this container group.  By default this is not set.\n      # \
      \  BIND_TO             String       Specify a Bluemix application name that\
      \ whose bound services you wish to make available to the container.  By default\
      \ this is not set.\n      #   DESIRED_INSTANCES:  Number       Specify the number\
      \ of instances in the group.  Default value is 1.\n      #   AUTO_RECOVERY:\
      \      Boolean      Set auto-recovery to true/false.  Default value is false.\n\
      \      #                                    Default is false.\n      #   CONTAINER_SIZE\
      \      String       Specify container size: pico (64), nano (128), micro (256),\
      \ tiny (512), small (1024), medium (2048),\n      #                        \
      \                                    large (4096), x-large (8192), 2x-large\
      \ (16384).\n      #                                    Default is micro (256).\n\
      \      #   CONCURRENT_VERSIONS Number       Number of versions of this group\
      \ to leave active.\n      #                                    Default is 1\n\
      \      # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment\
      \ out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)\n\
      \n      /bin/bash deployscripts/deploygroup.sh\n      RESULT=$?\n      # source\
      \ the deploy property file\n      if [ -f \"${DEPLOY_PROPERTY_FILE}\" ]; then\n\
      \        source \"$DEPLOY_PROPERTY_FILE\"\n      fi\n\n      #########################\n\
      \      # Environment DETAILS   #\n      #########################\n      # The\
      \ environment has been setup.\n      # The Cloud Foundry CLI (cf), IBM Container\
      \ Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python\
      \ 2.7.3 (python) have been installed.\n      # Based on the organization and\
      \ space selected in the Job credentials are in place for both IBM Container\
      \ Service and IBM Bluemix\n      # The following colors have been defined to\
      \ help with presentation of logs: green, red, label_color, no_color.\n     \
      \ if [ $RESULT -ne 0 ]; then\n        echo -e \"${red}Executed failed or had\
      \ warnings ${no_color}\"\n        ${EXT_DIR}/print_help.sh\n        exit $RESULT\n\
      \      fi\n      echo -e \"${green}Execution complete${no_label}\"\n\n     \
      \ export NAME=\"${CONTAINER_NAME}_${BUILD_NUMBER}\"\n      echo \"Value of NAME:\
      \ ${NAME}\"\n\n      echo -e \"${label_color}# -----------------------------\
      \ #${no_color}\"\n      echo -e \"${label_color}# [END]: Deploy Container Group\
      \ #${no_color}\"\n      echo -e \"${label_color}# -----------------------------\
      \ #${no_color}\"\n\n      echo -e \"${label_color}# -------------------- #${no_color}\"\
      \n      echo -e \"${label_color}# [BEGIN]: Deploy CUPS #${no_color}\"\n    \
      \  echo -e \"${label_color}# -------------------- #${no_color}\"\n\n      echo\
      \ \"Begining Eureka CUPS deployment\"\n\n      EUREKA_CONTAINER_GR_ID=`cf ic\
      \ group list | grep $NAME | sed 's/ .*$//g'`\n      EUREKA_CONTAINER_GR_IP=`cf\
      \ ic group inspect $EUREKA_CONTAINER_GR_ID | grep private_ip_address | sed 's/.*:\
      \ \"\\(.*\\)\".*$/\\1/g'`\n      echo \"Eureka container group ID: $EUREKA_CONTAINER_GR_ID\"\
      \n      echo \"Eureka container group IP: $EUREKA_CONTAINER_GR_IP\"\n      echo\
      \ \"Eureka Port: ${PORT}\"\n\n      if [ -z \"$(cf services | grep ${SERVICE_DISCOVERY_UPS})\"\
      \ ]; then\n        cf create-user-provided-service ${SERVICE_DISCOVERY_UPS}\
      \ -p \"{\\\"uri\\\": \\\"http://$EUREKA_CONTAINER_GR_IP:${PORT}/eureka/\\\"\
      }\"\n      else\n        cf update-user-provided-service ${SERVICE_DISCOVERY_UPS}\
      \ -p \"{\\\"uri\\\": \\\"http://$EUREKA_CONTAINER_GR_IP:${PORT}/eureka/\\\"\
      }\";\n      fi\n\n      echo -e \"${label_color}# ------------------ #${no_color}\"\
      \n      echo -e \"${label_color}# [END]: Deploy CUPS #${no_color}\"\n      echo\
      \ -e \"${label_color}# ------------------ #${no_color}\"\n\n      echo -e \"\
      ${label_color}# -------------------------- #${no_color}\"\n      echo -e \"\
      ${label_color}# [BEGIN]: Deploy Bridge App #${no_color}\"\n      echo -e \"\
      ${label_color}# -------------------------- #${no_color}\"\n\n      if [ -z \"\
      $(cf services | grep ${SERVICE_DISCOVERY_UPS})\" ]; then\n        echo \"[ERROR]:\
      \ The Eureka CUPS service has not been found.\"\n        echo \"[ERROR]: Please,\
      \ check previous step in this pipeline.\"\n        exit 1\n      else\n    \
      \    if [ -z \"$(cf apps | grep ${BRIDGE_APP})\" ]; then\n          touch empty_file.txt\n\
      \          cf push ${BRIDGE_APP} -p . -i 1 -d mybluemix.net -k 1M -m 64M --no-hostname\
      \ --no-manifest --no-route --no-start\n          cf bind-service ${BRIDGE_APP}\
      \ ${SERVICE_DISCOVERY_UPS}\n\t      fi\n      fi\n\n      echo -e \"${label_color}#\
      \ ------------------------ #${no_color}\"\n      echo -e \"${label_color}# [END]:\
      \ Deploy Bridge App #${no_color}\"\n      echo -e \"${label_color}# ------------------------\
      \ #${no_color}\"\n\n      echo -e \"${label_color}# -------------------------------\
      \ #${no_color}\"\n      echo -e \"${label_color}# [BEGIN]: Updating microservices\
      \ #${no_color}\"\n      echo -e \"${label_color}# -------------------------------\
      \ #${no_color}\"\n\n      NEW_EUREKA_LOCATION=\"http://${EUREKA_CONTAINER_GR_IP}:${PORT}/eureka/\"\
      \n\n      for MICROSERVICE in `cf ic group list | grep ${UNIQUE_IDENTIFIER}\
      \ | grep -v ${APP_NAME} | sed 's/    .*$//g' | sed 's/^.*  //g'`\n      do\n\
      \        echo \"[INFO]: Updating Eureka url for microservice: $MICROSERVICE\"\
      \n\n        MICROSERVICE_CONTAINER_GR_ID=`cf ic group list | grep $MICROSERVICE\
      \ | sed 's/ .*$//g'`\n        echo \"[INFO]: $MICROSERVICE container group id:\
      \ $MICROSERVICE_CONTAINER_GR_ID\"\n\n        OLD_VCAP_SERVICES=`cf ic group\
      \ inspect $MICROSERVICE_CONTAINER_GR_ID | grep 'VCAP_SERVICES=' | sed 's/^.*VCAP_SERVICES=\\\
      (.*\\)\",.*$/\\1/g'`\n        echo \"[INFO]:$MICROSERVICE old VCAP Services:\
      \ $OLD_VCAP_SERVICES\"\n\n        echo -e \"${red}Eureka location: $NEW_EUREKA_LOCATION\
      \ ${no_color}\"\n        NEW_VCAP_SERVICES=`echo $OLD_VCAP_SERVICES | sed 's/http.*eureka\\\
      //BLABLABLABLA/g'`\n        echo \"[INFO]:$MICROSERVICE new VCAP Services: $NEW_VCAP_SERVICES\"\
      \n\n        #cf ic group update -e \"VCAP_SERVICES=$NEW_VCAP_SERVICES\" $MICROSERVICE\
      \ &\n        ${EXT_DIR}/cf ic -v group update -e \"VCAP_SERVICES=BLABLA\" $MICROSERVICE\n\
      \        #cf ic group list\n        echo -e \"${red}Last execution result: $?\
      \ ${no_color}\"\n      done\n\n      echo -e \"${label_color}# -----------------------------\
      \ #${no_color}\"\n      echo -e \"${label_color}# [END]: Updating microservices\
      \ #${no_color}\"\n      echo -e \"${label_color}# -----------------------------\
      \ #${no_color}\"\n"
  - name: Active Deploy - Begin
    type: deployer
    extension_id: ibm.devops.services.pipeline.devops.ad_start
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: microservices-whats-for-dinner
    DEPLOYMENT_METHOD: Red Black
    RAMPDOWN_DURATION: 1s
    RAMPUP_DURATION: 1s
    COMMAND: |-
      #!/bin/bash
      #
      # The following code uses the Active Deploy service to update your new application with zero downtime.
      # The code used is available at https://github.com/Osthanes/update_service
      # and https://github.com/Osthanes/activedeploy_common.
      #
      # For details about how to set up the Active Deploy extension for the Delivery Pipeline, see
      # https://console.ng.bluemix.net/docs/services/ActiveDeploy/updatingapps.html#adpipeline.
      #
      # Feel free to fork the code. After creating your fork, define the environment variable GIT_HOME to use the forked repositories with the
      # format https://github.com/${GIT_HOME}/update_service and https://github.com/${GIT_HOME}/activedeploy_common.
      #
      # Make sure the following variables are defined as environment properties with no values:
      # NAME: The name of your new application. This variable has to be exported in the first deploy job.
      # TEST_RESULT_FOR_AD: Passes the results of the test phase to the Active Deploy - Complete job. Set this variable in the test job.
      #
      # The following variables may be defined as environment properties:
      # GROUP_SIZE: The number of instances that are created during initial deployment. The default value is 1.
      # CONCURRENT_VERSIONS: The number of application versions to keep at the end of deployment. The default value is 2.
      # AD_INSTANCE_NAME: The name for Active Deploy Instance, if it does not yet exist. The default value is activedeploy-for-pipeline.

      source ${EXT_DIR}/git_util.sh
      git_retry clone https://github.com/Osthanes/update_service.git activedeploy
      activedeploy/activedeploy_step_1.sh
  - name: Test
    type: tester
    fail_stage: false
    script: |-
      #!/bin/bash
      # invoke tests here
  - name: Active Deploy - Complete
    type: deployer
    extension_id: ibm.devops.services.pipeline.devops.ad_finish
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: microservices-whats-for-dinner
    COMMAND: |-
      #!/bin/bash
      #
      # The following code uses the Active Deploy service to update your new application with zero downtime.
      # The code used is available at https://github.com/Osthanes/update_service
      # and https://github.com/Osthanes/activedeploy_common.
      #
      # For details about how to set up the Active Deploy extension for the Delivery Pipeline, see
      # https://console.ng.bluemix.net/docs/services/ActiveDeploy/updatingapps.html#adpipeline.
      #
      # Feel free to fork the code. After creating your fork, define the environment variable GIT_HOME to use the forked repositories with the
      # format https://github.com/${GIT_HOME}/update_service and https://github.com/${GIT_HOME}/activedeploy_common.
      #

      source ${EXT_DIR}/git_util.sh
      git_retry clone https://github.com/Osthanes/update_service.git activedeploy
      activedeploy/activedeploy_step_2.sh
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish

---
stages:
- name: Build Java Projects
  inputs:
  - type: git
    branch: ${BRANCH}
    service: ${REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build Java
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
        #!/bin/bash
        echo "Run gradle build..."
        export JAVA_HOME=~/java8
        export PATH=$JAVA_HOME/bin:$PATH
        /bin/bash build-microservice.sh
        ls -al $PWD
        echo "Gradle build complete."
- name: Deploy Microservice
  inputs:
  - type: job
    stage: Build Java Projects
    job: Build Java
  triggers:
  - type: stage
  properties:
  - name: BUILD_TARGET
    value: ${BUILD_TARGET}
    type: text
  - name: SERVICE_DISCOVERY_UPS
    value: ${SERVICE_DISCOVERY_UPS}
    type: text
  - name: TEST_RESULT_FOR_AD
    value: ${TEST_RESULT_FOR_AD}
    type: text
  - name: GROUP_SIZE
    value: ${GROUP_SIZE}
    type: text
  - name: CONCURRENT_VERSIONS
    value: ${CONCURRENT_VERSIONS}
    type: text
  - name: DEBUG
    value: ${DEBUG}
    type: text
  - name: ROUTE_DOMAIN
    value: ${ROUTE_DOMAIN}
    type: text
  - name: APP_NAME
    value: ${APP_NAME}
    type: text
  - name: REGION
    value: ${REGION}
    type: text
  - name: ORG
    value: ${ORG}
    type: text
  - name: SPACE
    value: ${SPACE}
    type: text
  - name: ROUTE_HOSTNAME
    value: ${APP_NAME}
    type: text
  - name: NAME
    value: null
    type: text
  - name: RAMPDOWN_DURATION
    value: ${RAMPDOWN_DURATION}
    type: text
  - name: RAMPUP_DURATION
    value: ${RAMPUP_DURATION}
    type: text
  jobs:
  - name: Deploy cf app
    type: deployer
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
      application: ${APP_NAME}
    script: |-
      #!/bin/bash

      # -------------- #
      # Set debug mode #
      # -------------- #

      if [[ -n ${DEBUG} ]]; then set -x ; fi

      # --------------------------------------------------------------------------- #
      # Give the value to NAME once CF_APP and BUILD_NUMBER have taken their values #
      # --------------------------------------------------------------------------- #

      NAME="${CF_APP}_${BUILD_NUMBER}"

      # ------------------------------ #
      # Print relevant variable values #
      # ------------------------------ #

      echo "Value of APP_NAME: ${APP_NAME}"
      echo "Value of CF_APP: ${CF_APP}"
      echo "Value of NAME: ${NAME}"
      echo "Value of BUILD_NUMBER: ${BUILD_NUMBER}"
      echo "Value of ROUTE_HOSTNAME: ${ROUTE_HOSTNAME}"

      # ----------------------------------------- #
      #                  Push APP                 #
      # Do not start the app. Bind services first #
      # ----------------------------------------- #

      cf push "${NAME}" -p ${BUILD_TARGET} -i 1 --no-route

      # ----------- #
      # Create CUPS #
      # ----------- #

      if [ -z "$(cf services | grep ${SERVICE_DISCOVERY_UPS})" ]; then
        cf create-user-provided-service ${SERVICE_DISCOVERY_UPS} -p "{\"uri\": \"http://${ROUTE_HOSTNAME}.${ROUTE_DOMAIN}/eureka/\"}"
      else
        cf update-user-provided-service ${SERVICE_DISCOVERY_UPS} -p "{\"uri\": \"http://${ROUTE_HOSTNAME}.${ROUTE_DOMAIN}/eureka/\"}";
      fi

      # ----------------------------------------- #
      # Export variables needed in following jobs #
      # ----------------------------------------- #

      export NAME
      export CF_NAME
  - name: Active Deploy - Begin
    type: deployer
    extension_id: ibm.devops.services.pipeline.devops.ad_start
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    DEPLOYMENT_METHOD: Red Black
    RAMPDOWN_DURATION: ${RAMPDOWN_DURATION}
    RAMPUP_DURATION: ${RAMPUP_DURATION}
    COMMAND: |-
      #!/bin/bash
      #
      # The following code uses the Active Deploy service to update your new application with zero downtime.
      # The code used is available at https://github.com/Osthanes/update_service
      # and https://github.com/Osthanes/activedeploy_common.
      #
      # For details about how to set up the Active Deploy extension for the Delivery Pipeline, see
      # https://console.ng.bluemix.net/docs/services/ActiveDeploy/updatingapps.html#adpipeline.
      #
      # Feel free to fork the code. After creating your fork, define the environment variable GIT_HOME to use the forked repositories with the
      # format https://github.com/${GIT_HOME}/update_service and https://github.com/${GIT_HOME}/activedeploy_common.
      #
      # Make sure the following variables are defined as environment properties with no values:
      # NAME: The name of your new application. This variable has to be exported in the first deploy job.
      # TEST_RESULT_FOR_AD: Passes the results of the test phase to the Active Deploy - Complete job. Set this variable in the test job.
      #
      # The following variables may be defined as environment properties:
      # GROUP_SIZE: The number of instances that are created during initial deployment. The default value is 1.
      # CONCURRENT_VERSIONS: The number of application versions to keep at the end of deployment. The default value is 2.
      # AD_INSTANCE_NAME: The name for Active Deploy Instance, if it does not yet exist. The default value is activedeploy-for-pipeline.

      source ${EXT_DIR}/git_util.sh
      git_retry clone https://github.com/Osthanes/update_service.git activedeploy
      activedeploy/activedeploy_step_1.sh
  - name: Test
    type: tester
    fail_stage: false
    script: |-
      #!/bin/bash
      # invoke tests here

      # -------------- #
      # Set debug mode #
      # -------------- #
      if [[ -n ${DEBUG} ]]; then set -x ; fi

      echo "No test carried out"

      export TEST_RESULT_FOR_AD=0
  - name: Active Deploy - complete
    type: deployer
    extension_id: ibm.devops.services.pipeline.devops.ad_finish
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    COMMAND: |-
      #!/bin/bash
      #
      # The following code uses the Active Deploy service to update your new application with zero downtime.
      # The code used is available at https://github.com/Osthanes/update_service
      # and https://github.com/Osthanes/activedeploy_common.
      #
      # For details about how to set up the Active Deploy extension for the Delivery Pipeline, see
      # https://console.ng.bluemix.net/docs/services/ActiveDeploy/updatingapps.html#adpipeline.
      #
      # Feel free to fork the code. After creating your fork, define the environment variable GIT_HOME to use the forked repositories with the
      # format https://github.com/${GIT_HOME}/update_service and https://github.com/${GIT_HOME}/activedeploy_common.
      #

      source ${EXT_DIR}/git_util.sh
      git_retry clone https://github.com/Osthanes/update_service.git activedeploy
      activedeploy/activedeploy_step_2.sh

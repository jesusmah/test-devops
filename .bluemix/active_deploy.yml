---
stages:
- name: Build Java Projects
  inputs:
  - url: https://github.com/jesusmah/appetizer-cf-clone.git
    type: git
    branch: BUILD
    dir_name: null
  triggers:
  - type: commit
  jobs:
  - name: Build Java
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
      echo "Run gradle build..."
      export JAVA_HOME=~/java8
      export PATH=$JAVA_HOME/bin:$PATH
      /bin/bash build-microservice.sh
      ls -al $PWD
      echo "Gradle build complete."
- name: Deploy CF App
  inputs:
  - type: job
    stage: Build Java Projects
    job: Build Java
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: BUILD_TARGET
    value: 'build/libs/wfd-appetizer-0.0.1-SNAPSHOT.jar'
    type: text
  - name: CONFIG_SERVER_UPS
    value: 'config-server-cf'
    type: text
  - name: SERVICE_DISCOVERY_UPS
    value: 'eureka-service-discovery'
    type: text
  - name: AD_INSTANCE_NAME
    value: 'Active\ Depoy-r6'
    type: text
  - name: TEST_RESULT_FOR_AD
    value: null
    type: text
  - name: GROUP_SIZE
    value: '1'
    type: text
  - name: NAME
    value: null
    type: text
  jobs:
  - name: Deploy app
    type: deployer
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: microservices-whats-for-dinner
      application: wfd-appetizer-cf
    script: |-
      #!/bin/bash
      NAME="${CF_APP}_${BUILD_NUMBER}"
      cf push "${NAME}" -p ${BUILD_TARGET} --no-route -i 1 --no-start
      cf set-env ${NAME} SPRING_PROFILES_ACTIVE cloud
      cf bind-service ${NAME} ${SERVICE_DISCOVERY_UPS}
      cf bind-service ${NAME} ${CONFIG_SERVER_UPS}
      cf start ${NAME}
      export NAME
  - name: Active Deploy - begin
    type: deployer
    extension_id: ibm.devops.services.pipeline.devops.ad_start
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: microservices-whats-for-dinner
    DEPLOYMENT_METHOD: Red Black
    RAMPDOWN_DURATION: 2m
    RAMPUP_DURATION: 2m
    COMMAND: |-
      #!/bin/bash
      #
      # The following code uses the Active Deploy service to update your new application with zero downtime.
      # The code used is available at https://github.com/Osthanes/update_service
      # and https://github.com/Osthanes/activedeploy_common.
      #
      # For details about how to set up the Active Deploy extension for the Delivery Pipeline, see
      # https://console.ng.bluemix.net/docs/services/ActiveDeploy/updatingapps.html#adpipeline.
      #
      # Feel free to fork the code. After creating your fork, define the environment variable GIT_HOME to use the forked repositories with the
      # format https://github.com/${GIT_HOME}/update_service and https://github.com/${GIT_HOME}/activedeploy_common.
      #
      # Make sure the following variables are defined as environment properties with no values:
      # NAME: The name of your new application. This variable has to be exported in the first deploy job.
      # TEST_RESULT_FOR_AD: Passes the results of the test phase to the Active Deploy - Complete job. Set this variable in the test job.
      #
      # The following variables may be defined as environment properties:
      # GROUP_SIZE: The number of instances that are created during initial deployment. The default value is 1.
      # CONCURRENT_VERSIONS: The number of application versions to keep at the end of deployment. The default value is 2.
      # AD_INSTANCE_NAME: The name for Active Deploy Instance, if it does not yet exist. The default value is activedeploy-for-pipeline.

      source ${EXT_DIR}/git_util.sh
      git_retry clone https://github.com/Osthanes/update_service.git activedeploy
      activedeploy/activedeploy_step_1.sh
  - name: Test new version
    type: tester
    fail_stage: false
    script: |-
      #!/bin/bash
      # invoke tests here

      sleep 120
      export TEST_RESULT_FOR_AD=0
      export TEST_RESULT_FOR_AD=1
  - name: Active Deploy - complete
    type: deployer
    extension_id: ibm.devops.services.pipeline.devops.ad_finish
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: microservices-whats-for-dinner
    COMMAND: |-
      #!/bin/bash
      #
      # The following code uses the Active Deploy service to update your new application with zero downtime.
      # The code used is available at https://github.com/Osthanes/update_service
      # and https://github.com/Osthanes/activedeploy_common.
      #
      # For details about how to set up the Active Deploy extension for the Delivery Pipeline, see
      # https://console.ng.bluemix.net/docs/services/ActiveDeploy/updatingapps.html#adpipeline.
      #
      # Feel free to fork the code. After creating your fork, define the environment variable GIT_HOME to use the forked repositories with the
      # format https://github.com/${GIT_HOME}/update_service and https://github.com/${GIT_HOME}/activedeploy_common.
      #

      source ${EXT_DIR}/git_util.sh
      git_retry clone https://github.com/Osthanes/update_service.git activedeploy
      activedeploy/activedeploy_step_2.sh
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
